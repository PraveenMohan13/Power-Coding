Ascending digits
You love rearranging linked lists to make them form patterns. Today you try to explore organizing nodes based on their numerical values. Specifically, you aim to group nodes by the number of digits in their values, arranging them so that nodes with fewer digits come first while preserving the original order within each group. Objective: Build a linked list with the values given in input and then, rearrange the linked list in place so that nodes with 1- digit values come first, followed by 2-digit values, and so on up to 6-digit values, preserving the original relative order within each group. You MUST NOT alter the values of the nodes. Input Format: The input to your program consists of values in the linked list initially: The first line contains an integer N, the number of nodes. The second line contains N integers, where each integer is the value of a node. Output format
Print N integers which are the final linked lists' nodes in order. Constraints: 1 <= N <= 10^5 (number of nodes) 1 <= Value <= 999999 (Values in nodes) Sample Test Case 1: Input: 4 1800 211 15 Output: 1 15 800 211 Explanation 1: The initial linked list is: 1 -> 800->211 -> 15. We need to group the nodes based on the number of digits in their values. Nodes with 1-digit values: [1] Nodes with 2-digit values: [15] Nodes with 3-digit values: [800, 211] After grouping: First, we place the 1-digit nodes: [1]
Then, the 2-digit nodes: [15] Finally, the 3-digit nodes: [800, 211] The rearranged linked list is: 1 -> 15 -> 800 -> 211.

import java.util.*;

public class Main {
    public static void main(String[] args) {
      
      Scanner sc=new Scanner (System.in);
      LinkedList<Integer>list=new LinkedList<>();
      int n=sc.nextInt();
      int max=Integer.MIN_VALUE;
      for (int i=0; i<n; i++ ){
        int num=sc.nextInt();
        list.add(num);
        max=Math.max(String.valueOf(num).length(),max);
      }
      
      LinkedList<Integer> res=new LinkedList<>();
      for (int i=1; i<=max; i++){
        for (int v:list){
          if (String.valueOf(v).length()==i){
            res.add(v);
          }
        }
      }
      
      for (int i:res){
        System.out.print(i+" ");
      }
    }
}
